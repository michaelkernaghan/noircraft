{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"15306917955810869394","abi":{"parameters":[{"name":"public_hash","type":{"kind":"field"},"visibility":"public"},{"name":"preimage","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QUQqAMAxDHXigdmm39s+rONzufwQZTpCBX/qglP6kScJyEcYsj7uzjU3f4DD9uHVBSaTmWBm8U/RiSqIlGRur6RENqCaWvXgmZ0Hlpo42hP/yCIJ3b+uUf+7ljRNpI+GeSAEAAA==","debug_symbols":"pZFBDoMgEEXvMmsXSGtavUrTGMTRkBAgCE0a4907Gmy1id10Ncx83ofMH6HFJva1Mp0doLqN0HilteprbaUIyhqajlMGa1sHj0gj2OhEOeHRBKhM1DqDh9BxuTQ4YZYahCeVZYCmpUqGndI4n6bsQ7Nj9FxcE3y+lG+82PP5MZ+Xp8TznP/Hc3bE//p/yRNffPF36oRUfrdxYIRMs51XotGYUuiikZtQwtOtyhqb81ZiGz3OdotGD7wA","file_map":{"50":{"source":"// Simple SNARK Demo - Working Examples\n// Demonstrates core SNARK concepts without compilation errors\n\n// Simple hash function for demonstration\nfn simple_hash(preimage: Field) -> Field {\n    preimage * preimage + 12345\n}\n\n// Example 1: Hash Preimage Circuit\n// Prove knowledge of preimage without revealing it\nfn main(\n    public_hash: pub Field,  // Public: the hash value\n    preimage: Field          // Private: the preimage\n) {\n    let computed_hash = simple_hash(preimage);\n    assert(computed_hash == public_hash);\n}\n\n// Additional examples as separate functions for testing\n\n// Range proof: prove age is in valid range\nfn prove_age_range(min_age: Field, max_age: Field, actual_age: Field) {\n    let min_u64 = min_age as u64;\n    let max_u64 = max_age as u64;\n    let age_u64 = actual_age as u64;\n    \n    assert(age_u64 >= min_u64);\n    assert(age_u64 <= max_u64);\n}\n\n// Simple Merkle tree verification\nfn verify_merkle_path(root: Field, leaf: Field, path: [Field; 3], indices: [Field; 3]) -> bool {\n    let mut current = leaf;\n    \n    for i in 0..3 {\n        let sibling = path[i];\n        if indices[i] == 0 {\n            current = current + sibling * 2 + 1;  // Simple hash\n        } else {\n            current = sibling + current * 2 + 1;\n        }\n    }\n    \n    current == root\n}\n\n// Simple signature verification\nfn verify_simple_signature(message: Field, signature: [Field; 2], pubkey: Field) -> bool {\n    let verification = signature[0] + signature[1] * message;\n    verification == pubkey\n}\n\n#[test]\nfn test_hash_preimage() {\n    let preimage = 42;\n    let hash = simple_hash(preimage);\n    \n    // This would be the main circuit verification\n    let computed = simple_hash(preimage);\n    assert(computed == hash);\n}\n\n#[test]\nfn test_age_range() {\n    prove_age_range(18, 65, 25);  // Valid age\n}\n\n#[test]\nfn test_merkle_verification() {\n    let leaf = 100;\n    let path = [200, 300, 400];\n    let indices = [0, 1, 0];\n    \n    // Calculate expected root\n    let mut expected_root = leaf;\n    for i in 0..3 {\n        if indices[i] == 0 {\n            expected_root = expected_root + path[i] * 2 + 1;\n        } else {\n            expected_root = path[i] + expected_root * 2 + 1;\n        }\n    }\n    \n    assert(verify_merkle_path(expected_root, leaf, path, indices));\n}\n\n#[test]\nfn test_signature_verification() {\n    let message = 500;\n    let signature = [500, 1];  // r=500, s=1\n    let pubkey = signature[0] + signature[1] * message;  // 500 + 1 * 500 = 1000\n    \n    assert(verify_simple_signature(message, signature, pubkey));\n}\n","path":"/home/mike/noircraft/simple_snark_demo/src/main.nr"}},"names":["main"],"brillig_names":[]}